{"version":3,"sources":["pages/MainPage/MainPage.module.css","images/cop.png","images/arrow.svg","components/UniverButton/UniverButton.module.css","components/UniverButton/UniverButton.js","pages/MainPage/MainPage.js","pages/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","UniverButton","title","className","style","button","MainPage","React","useState","searchValue","setValue","universList","value","label","univers","setUnivers","useEffect","newList","filter","item","includes","toUpperCase","container","src","cop","alt","info","text","choice","choose","arrow","input","onChange","e","target","placeholder","list","map","index","key","App","pages","path","component","exact","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.278663b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainPage_container__1B8k-\",\"cop\":\"MainPage_cop__3aMpb\",\"info\":\"MainPage_info__3xxOy\",\"title\":\"MainPage_title__38MlJ\",\"text\":\"MainPage_text__2-yf1\",\"choice\":\"MainPage_choice__2gFH9\",\"choose\":\"MainPage_choose__1dLul\",\"arrow\":\"MainPage_arrow__3kMjf\",\"input\":\"MainPage_input__3WRLt\",\"list\":\"MainPage_list__2hY7u\"};","module.exports = __webpack_public_path__ + \"static/media/cop.9471c5a6.png\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ee642307.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"UniverButton_button__1xROU\"};","import React from \"react\";\nimport style from \"./UniverButton.module.css\";\n\nconst UniverButton = ({ title }) => {\n  return <div className={style.button}>{title}</div>;\n};\n\nexport default UniverButton;\n","import React from \"react\";\nimport style from \"./MainPage.module.css\";\nimport cop from \"../../images/cop.png\";\nimport arrow from \"../../images/arrow.svg\";\nimport UniverButton from \"../../components/UniverButton/UniverButton\";\n\nconst MainPage = () => {\n  const [searchValue, setValue] = React.useState(\"\");\n  const handleChangeSearch = function (e) {\n    setValue(e.target.value);\n  };\n\n  const universList = [\n    { value: \"bgu\", label: \"БГУ\" },\n    { value: \"bntu\", label: \"БНТУ\" },\n    { value: \"bgeu\", label: \"БГЭУ\" },\n    { value: \"bguir\", label: \"БГУИР\" },\n    { value: \"bgtu\", label: \"БГТУ\" },\n    { value: \"bgmu\", label: \"БГМУ\" },\n    { value: \"mglu\", label: \"МГЛУ\" },\n    { value: \"bgufk\", label: \"БГУФК\" },\n    { value: \"bgpu\", label: \"БГПУ\" },\n    { value: \"bgatu\", label: \"БГАТУ\" },\n    { value: \"bguki\", label: \"БГУКИ\" },\n    { value: \"bgam\", label: \"БГАМ\" },\n    { value: \"bgai\", label: \"БГАИ\" },\n    { value: \"mitso\", label: \"МИТСО\" },\n    { value: \"miu\", label: \"МИУ\" },\n    { value: \"aupprb\", label: \"АУпПРБ\" },\n  ];\n  const [univers, setUnivers] = React.useState(universList);\n\n  React.useEffect(() => {\n    const newList = universList.filter((item) =>\n      item.label.includes(searchValue.toUpperCase())\n    );\n    setUnivers(newList);\n  }, [searchValue]);\n\n  return (\n    <div className={style.container}>\n      <img src={cop} alt=\"copustochka\" className={style.cop} />\n      <div className={style.info}>\n        <h1 className={style.title}>СТУДЕНТЫ САМОУПРАВЛЯЕМСЯ!</h1>\n        <p className={style.text}>\n          Ведь студсовет это не только капустник, а профком — не путевки в\n          санаторий\n        </p>\n      </div>\n      <div className={style.choice}>\n        <p className={style.choose}>ВЫБЕРИ СВОЙ УНИВЕР</p>\n        <img src={arrow} alt=\"arrow\" className={style.arrow} />\n      </div>\n      <input\n        className={style.input}\n        value={searchValue}\n        onChange={handleChangeSearch}\n        placeholder=\"Начни вводить название университета\"\n      />\n      <div className={style.list}>\n        {univers.map((item, index) => (\n          <UniverButton title={item.label} key={index} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport MainPage from '../MainPage/MainPage'\n\nconst App = () => {\n  const pages = [\n    {\n      path: \"/\",\n      component: <MainPage />,\n    },\n  ];\n  return (\n    <Switch>\n     {pages.map((item, index) => (\n        <Route\n          exact\n          path={item.path}\n          component={item.component}\n          key={`react-router--${index}`}\n        >\n          {item.component}\n        </Route>))}\n      </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport {createBrowserHistory} from 'history'\nimport './index.css';\n\nconst history = createBrowserHistory()\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}